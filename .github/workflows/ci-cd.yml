name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run security scan daily at midnight

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir -r requirements-dev.txt

      - name: Security Scan Python Dependencies
        working-directory: backend
        uses: docker://lgeiger/auditwheel:latest
        with:
          args: --requirements requirements.txt

      - name: Install Node dependencies
        working-directory: frontend
        run: |
          npm ci
          npm audit --production --json > audit.json || true

      - name: Security Scan Node Dependencies
        working-directory: frontend
        run: |
          npm install -g snyk
          snyk test --file=package.json --severity-threshold=high

      - name: Run security checks
        run: |
          # Run security checks
          npx eslint . --ext .ts,.tsx --max-warnings=0
          npx tsx security-checks.tsx
          npx trivy fs . --exit-code 1 --severity HIGH,CRITICAL

      - name: Run Python security checks
        working-directory: backend
        run: |
          bandit -r app/
          safety check --full-report
          python -m pytest tests/security.py

      - name: Install Node dependencies
        working-directory: frontend
        run: |
          npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: |
          npm run test

      - name: Run backend tests
        working-directory: backend
        run: |
          python -m pytest tests/

      - name: Run type checks
        run: |
          # Run TypeScript type checks
          npm run type-check --prefix frontend
          # Run Python type checks
          mypy backend/app

      - name: Run linters
        run: |
          # Run ESLint for frontend
          npm run lint --prefix frontend
          # Run Python linters
          flake8 backend/app

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose-full.yml build

      - name: Run Docker containers
        run: |
          docker-compose -f docker-compose-full.yml up -d

      - name: Run performance tests
        run: |
          # Wait for services to start
          sleep 10
          # Run performance tests
          npm run test:performance --prefix frontend
          python -m pytest tests/performance.py

      - name: Run API tests
        run: |
          # Wait for services to start
          sleep 10
          # Run API tests
          curl -v http://localhost:8000/health
          curl -v http://localhost:3000/health
          npm run test:e2e --prefix frontend
          python -m pytest tests/e2e.py

      - name: Cleanup
        run: |
          docker-compose -f docker-compose-full.yml down

      - name: Deploy to Staging
        if: github.ref == 'refs/heads/main'
        needs: build
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - name: Deploy to Staging
            env:
              DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
              DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
            run: |
              docker-compose -f docker-compose-full.yml push
              docker-compose -f docker-compose-full.yml -f docker-compose.staging.yml up -d

      - name: Deploy to Production
        if: startsWith(github.ref, 'refs/tags/v')
        needs: build
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - name: Deploy to Production
            env:
              DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
              DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
            run: |
              docker-compose -f docker-compose-full.yml push
              docker-compose -f docker-compose.full.yml -f docker-compose.production.yml up -d

      - name: Run API tests
        run: |
          # Wait for services to start
          sleep 10
          # Run API tests
          curl -v http://localhost:8000/health
          curl -v http://localhost:3000/health

      - name: Cleanup
        run: |
          docker-compose -f docker-compose-full.yml down
